{"version":3,"sources":["../src/actions/getScore.ts","../src/index.ts"],"sourcesContent":["import {\n    type Action,\n    elizaLogger,\n    type IAgentRuntime,\n    type Memory,\n    type HandlerCallback,\n    type State,\n    getEmbeddingZeroVector,\n    composeContext,\n    generateMessageResponse,\n    ModelClass,\n} from \"@elizaos/core\";\n\ninterface PassportScore {\n    address: string;\n    score: string;\n    threshold: string;\n    passing_score: string;\n}\n\nconst createTokenMemory = async (\n    runtime: IAgentRuntime,\n    _message: Memory,\n    formattedOutput: string\n) => {\n    const memory: Memory = {\n        userId: _message.userId,\n        agentId: _message.agentId,\n        roomId: _message.roomId,\n        content: { text: formattedOutput },\n        createdAt: Date.now(),\n        embedding: getEmbeddingZeroVector(),\n    };\n    await runtime.messageManager.createMemory(memory);\n};\n\nexport const addressTemplate = `From previous sentence extract only the Ethereum address being asked about.\nRespond with a JSON markdown block containing only the extracted value:\n\n\\`\\`\\`json\n{\n\"address\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const getPassportScoreAction: Action = {\n    name: \"GET_PASSPORT_SCORE\",\n    description: \"Get score from Passport API for an address\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.log(\"Validating runtime for GET_PASSPORT_SCORE...\");\n        const apiKey = runtime.getSetting(\"PASSPORT_API_KEY\");\n        const scorerId = runtime.getSetting(\"PASSPORT_SCORER\");\n        if (!apiKey || !scorerId) {\n            elizaLogger.error(\n                \"Missing PASSPORT_API_KEY or PASSPORT_SCORER settings\"\n            );\n            return false;\n        }\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting GET_PASSPORT_SCORE handler...\");\n        const apiKey = runtime.getSetting(\"PASSPORT_API_KEY\");\n        const scorerId = runtime.getSetting(\"PASSPORT_SCORER\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(_message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        const context = composeContext({\n            state: currentState,\n            template: `${_message.content.text}\\n${addressTemplate}`,\n        });\n\n        const addressRequest = await generateMessageResponse({\n            runtime,\n            context,\n            modelClass: ModelClass.SMALL,\n        });\n\n        const address = addressRequest.address as string;\n\n        if (!address) {\n            callback({ text: \"Address is required.\" }, []);\n            return;\n        }\n\n        try {\n            const response = await fetch(\n                `https://api.passport.xyz/v2/stamps/${scorerId}/score/${address}`,\n                {\n                    method: \"GET\",\n                    headers: {\n                        \"X-API-KEY\": apiKey,\n                        accept: \"application/json\",\n                    },\n                }\n            );\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            const data: PassportScore = await response.json();\n            const formattedOutput = `Address: ${data.address}\\nScore: ${data.score}${data.passing_score ? \"\\nScore is above threshold\" : `\\nScore is below threshold (${data.threshold})`}`;\n\n            await createTokenMemory(runtime, _message, formattedOutput);\n\n            callback({ text: formattedOutput }, []);\n        } catch (error) {\n            elizaLogger.error(\"Error fetching Passport score:\", error);\n            callback(\n                {\n                    text: \"Failed to fetch Passport score. Please check the logs for more details.\",\n                },\n                []\n            );\n        }\n    },\n    examples: [],\n    similes: [\n        \"GET_PASSPORT_SCORE\",\n        \"FETCH_PASSPORT_SCORE\",\n        \"CHECK_PASSPORT_SCORE\",\n        \"VIEW_PASSPORT_SCORE\",\n    ],\n};\n","export * from \"./actions/getScore\";\n\nimport type { Plugin } from \"@elizaos/core\";\nimport { getPassportScoreAction } from \"./actions/getScore\";\n\nexport const gitcoinPassportPlugin: Plugin = {\n    name: \"passport\",\n    description: \"Gitcoin passport integration plugin\",\n    providers: [],\n    evaluators: [],\n    services: [],\n    actions: [getPassportScoreAction],\n};\n\nexport default gitcoinPassportPlugin;\n"],"mappings":"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","names":[]}